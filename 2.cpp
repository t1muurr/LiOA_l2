#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <malloc.h>
#include <locale.h>

void shell(int *items, int count)
{

	int i, j, gap, k;
	int x, a[5];

	a[0]=9; a[1]=5; a[2]=3; a[3]=2; a[4]=1;

	for(k=0; k < 5; k++) {
		gap = a[k];
		for(i=gap; i < count; ++i) {
			x = items[i];
			for(j=i-gap; (x < items[j]) && (j >= 0); j=j-gap)
				items[j+gap] = items[j];
			items[j+gap] = x;
		}
	}
}

void qs(int *items, int left, int right) //вызов функции: qs(items, 0, count-1);
{
	int i, j;
	int x, y;



	i = left; j = right;

	/* выбор компаранда */
	x = items[(left+right)/2];

	do {
		while((items[i] < x) && (i < right)) i++;
		while((x < items[j]) && (j > left)) j--;

		if(i <= j) {
			y = items[i];
			items[i] = items[j];
			items[j] = y;
			i++; j--;
		}
	} while(i <= j);

	if(left < j) qs(items, left, j);
	if(i < right) qs(items, i, right);
}

int comp(const void * x1, const void * x2)
{
	return ( (int)x1 - (int)x2 );
}

int main()
{
	setlocale(LC_ALL, "rus");
	clock_t start, end; // объявляем переменные для определения времени выполнения
	int *mas_qs, *mas_sh, *mas_qsort; // создаем указатели на массивы для сортировок
	int k; // определяет размер динамических массивов

	printf("Введите размер массива > 1\n");
	scanf("%d", &k);
	while (k <= 1)
	{
		printf("Введите размер массива еще раз:\n");
		scanf("%d", &k);
	}

	mas_qs = (int*)malloc(k * sizeof(k)); // выделяем память под динамический массив
	mas_sh = (int*)malloc(k * sizeof(k)); // выделяем память под динамический массив
	mas_qsort = (int*)malloc(k * sizeof(k)); // выделяем память под динамический массив

	srand(time(NULL)); // инициализируем параметры генератора случайных чисел

	for (int i = 0; i < k; i++)
	{
		mas_qs[i] = rand() % 100 + 1; // заполняем массив случайными элементами
		mas_sh[i] = mas_qs[i]; // копируем этот массив в другой
		mas_qsort[i] = mas_qs[i]; // копируем этот массив в другой
	}

	//_________________________________________________________________________

	start = clock(); // в переменную start записываем время от начала запуска программы
	shell(mas_sh, k); // вызываем сортировку Шелла
	end = clock(); // в переменную end записываем время от начала запуска программы
	long time_shell = (end - start) * 1000 / CLOCKS_PER_SEC ; // вычисляем разность(т.е. время, затраченное на сортировку Шелла)

	start = clock(); // в переменную start записываем время от начала запуска программы
	qs(mas_qs, 0, k - 1); // вызываем быструю сортировку
	end = clock(); // в переменную end записываем время от начала запуска программы
	long time_qs = (end - start) * 1000 / CLOCKS_PER_SEC ; // вычисляем разность(т.е. время, затраченное на быструю сортировку)

	start = clock(); // в переменную start записываем время от начала запуска программы
	qsort(mas_qsort, k, sizeof(int), comp); // вызываем быструю сортировку
	end = clock(); // в переменную end записываем время от начала запуска программы
	long time_qsort = (end - start) * 1000 / CLOCKS_PER_SEC ; // вычисляем разность(т.е. время, затраченное на быструю сортировку)

	//_________________________________________________________________________

	printf("\n______________________________________________________________________________\n");
	printf("|           |Сортировка Шелла(ms)|Быстрая сортировка(ms)|Сортировка qsort(ms)|\n");
	printf("|-----------|--------------------|----------------------|--------------------|\n");
	printf("|Случ. набор|%20d|%22d|%20d|\n", time_shell, time_qs, time_qsort); // выводим результат работы быстрой сортировки в миллисекундах
	printf("|-----------|--------------------|----------------------|--------------------|\n");

	//_________________________________________________________________________

	for (int i = 0; i < k; i++)
	{
		mas_qs[i] = i; // копируем в этот массив, возрастающий
		mas_sh[i] = i; // копируем в этот массив, возрастающий
		mas_qsort[i] = i; // копируем в этот массив, возрастающий
	}

	//_________________________________________________________________________

	start = clock(); // в переменную start записываем время от начала запуска программы
	shell(mas_sh, k); // вызываем сортировку Шелла
	end = clock(); // в переменную end записываем время от начала запуска программы
	time_shell = (end - start) * 1000 / CLOCKS_PER_SEC ; // вычисляем разность(т.е. время, затраченное на сортировку Шелла)


	start = clock(); // в переменную start записываем время от начала запуска программы
	qs(mas_qs, 0, k - 1); // вызываем быструю сортировку
	end = clock(); // в переменную end записываем время от начала запуска программы
	time_qs = (end - start) * 1000 / CLOCKS_PER_SEC ; // вычисляем разность(т.е. время, затраченное на быструю сортировку)


	start = clock(); // в переменную start записываем время от начала запуска программы
	qsort(mas_qsort, k, sizeof(int), comp); // вызываем быструю сортировку
	end = clock(); // в переменную end записываем время от начала запуска программы
	time_qsort = (end - start) * 1000 / CLOCKS_PER_SEC ; // вычисляем разность(т.е. время, затраченное на быструю сортировку)

	//_________________________________________________________________________

	printf("|Прямая п.  |%20d|%22d|%20d|\n", time_shell, time_qs, time_qsort); // выводим результат работы быстрой сортировки в миллисекундах
	printf("|-----------|--------------------|----------------------|--------------------|\n");

	//_________________________________________________________________________

	for (int i = 0; i < k; i++)
	{
		mas_qs[i] = k - i; // копируем в этот массив, убывающий
		mas_sh[i] = k - i; // копируем в этот массив, убывающий
		mas_qsort[i] = k - i; // копируем в этот массив, убывающий
	}

	//_________________________________________________________________________

	start = clock(); // в переменную start записываем время от начала запуска программы
	shell(mas_sh, k); // вызываем сортировку Шелла
	end = clock(); // в переменную end записываем время от начала запуска программы
	time_shell = (end - start) * 1000 / CLOCKS_PER_SEC ; // вычисляем разность(т.е. время, затраченное на сортировку Шелла)


	start = clock(); // в переменную start записываем время от начала запуска программы
	qs(mas_qs, 0, k - 1); // вызываем быструю сортировку
	end = clock(); // в переменную end записываем время от начала запуска программы
	time_qs = (end - start) * 1000 / CLOCKS_PER_SEC ; // вычисляем разность(т.е. время, затраченное на быструю сортировку)

	start = clock(); // в переменную start записываем время от начала запуска программы
	qsort(mas_qsort, k, sizeof(int), comp); // вызываем быструю сортировку
	end = clock(); // в переменную end записываем время от начала запуска программы
	time_qsort = (end - start) * 1000 / CLOCKS_PER_SEC ; // вычисляем разность(т.е. время, затраченное на быструю сортировку)

	//_________________________________________________________________________

	printf("|Обратная п.|%20d|%22d|%20d|\n", time_shell, time_qs, time_qsort); // выводим результат работы быстрой сортировки в миллисекундах
	printf("|-----------|--------------------|----------------------|--------------------|\n");

	//_________________________________________________________________________
	
	for (int i = 0; i < k; i++)
	{
		if (i < (k / 2))
		{
			mas_qs[i] = i; // копируем в этот массив, возрастающий
			mas_sh[i] = i; // копируем в этот массив, возрастающий
			mas_qsort[i] = i; // копируем в этот массив, у возрастающий
		}
		else
		{
			mas_qs[i] = k + 1 - i; // копируем в этот массив, убывающий
			mas_sh[i] = k + 1 - i; // копируем в этот массив, убывающий
			mas_qsort[i] = k + 1 - i; // копируем в этот массив, убывающий
		}
	}
	//_________________________________________________________________________

	start = clock(); // в переменную start записываем время от начала запуска программы
	shell(mas_sh, k); // вызываем сортировку Шелла
	end = clock(); // в переменную end записываем время от начала запуска программы
	time_shell = (end - start) * 1000 / CLOCKS_PER_SEC ; // вычисляем разность(т.е. время, затраченное на сортировку Шелла)


	start = clock(); // в переменную start записываем время от начала запуска программы
	qs(mas_qs, 0, k - 1); // вызываем быструю сортировку
	end = clock(); // в переменную end записываем время от начала запуска программы
	time_qs = (end - start) * 1000 / CLOCKS_PER_SEC ; // вычисляем разность(т.е. время, затраченное на быструю сортировку)

	start = clock(); // в переменную start записываем время от начала запуска программы
	qsort(mas_qsort, k, sizeof(int), comp); // вызываем быструю сортировку
	end = clock(); // в переменную end записываем время от начала запуска программы
	time_qsort = (end - start) * 1000 / CLOCKS_PER_SEC ; // вычисляем разность(т.е. время, затраченное на быструю сортировку)

	//_________________________________________________________________________

	printf("|Прям-обр п.|%20d|%22d|%20d|\n", time_shell, time_qs, time_qsort); // выводим результат работы быстрой сортировки в миллисекундах
	printf("|-----------|--------------------|----------------------|--------------------|\n");

	//_________________________________________________________________________

	free(mas_qs); // очищаем память
	free(mas_sh); // очищаем память
	free(mas_qsort); // очищаем память

	return 0;
}